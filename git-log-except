#!/bin/sh
NAME='https://github.com/gibson042/git-log-except'
VERSION=0.0.1
DESCRIPTION='Executes git log, excluding commits matching provided filters.'
USAGE='<command> |\
       [[--]verbose] [<filter options>] [-- <format options>] [<revision range>] [[--] <path>...]\
\
Commands:\
   [--]help     Display this message\
   [--]version  Show software version'

# Exit immediately upon failure
set -e

# Self-identify, ignoring a useless $0 in git alias invocations
case "$1" in --version|version) echo $VERSION >&2 ; exit 64 ;; esac
CMD="$0"
if { printf %s "$CMD" | grep [[:space:]] && ! command -v "$CMD"; } >/dev/null 2>&1 ; then CMD=; fi

# usage [<error message> [<exit code>]]
usage () {
	message="$1"
	if [ -z "$message" ]; then message="`printf '%s %s\n%s' "$NAME" "$VERSION" "$DESCRIPTION"`"; fi
	printf '%s\nUsage: %s %s\n' "$message" "$CMD" "$USAGE" | sed 's/\\//g' >&2
	if [ -z "$2" ]; then exit 64; fi
	exit $2
}

main () {
	case ":$1" in :--help|:help|:) usage ;; esac
	VERBOSE=:
	case "$1" in --verbose|verbose) shift; VERBOSE= ;; esac

	# Chunk CLI options/arguments
	filters=
	format=
	rev_path=
	section=filters
	for opt do
		case "$opt" in
			--)
				if [ $section = filters ]; then section=format; continue; fi
				if [ $section = format ]; then section=rev_path; continue; fi
				;;
			-*)
				if [ $section = filters ]; then filters="$filters `quote "$opt"`"; continue; fi
				if [ $section = format ]; then format="$format `quote "$opt"`"; continue; fi
				;;
		esac
		rev_path="$rev_path `quote "$opt"`"
	done
	$VERBOSE printf >&2 'Filters:%s\nFormat:%s\nRevision/Path:%s\n' \
		"$filters" "$format" "$rev_path"

	# Write the excluded commit hashes to an auto-removed temp file
	tmp="`mktemp`"
	trap 'opt=; if [ "$VERBOSE" != : ]; then opt=-v; fi; rm $opt "$tmp" >&2' 0
	if [ -n "$filters" ]; then
		eval "set -- git log $filters --format=%H $rev_path"; "$@" >"$tmp"
	fi
	$VERBOSE awk >&2 -v MSG='Commits to exclude: ' -v HEAD=3 \
		'NR<=HEAD{l=l ORS $0} END{print MSG NR l; if(NR>HEAD) print "..."; else print "---"}' "$tmp"

	# Log _only_ (--no-walk) those commits NOT found above
	{ eval "set -- git log --format=%H $rev_path"; "$@"; } | grep -vFf "$tmp" |
		{ eval "set -- git log $format --stdin --no-walk"; "$@"; }
}

# quote <string>
# Safely quote a string for eval
# http://www.etalabs.net/sh_tricks.html
quote () { printf '%s\n' "$1" | sed "s/'/'\\\\''/g;1s/^/'/;\$s/\$/'/"; }

# Normal mode relies on script arguments
if [ -n "$CMD" ]; then main "$@"; exit; fi

# git alias mode uses the appended arguments
main
